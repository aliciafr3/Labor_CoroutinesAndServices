FRAGEN
---------------------------------------------------------------------------------------------------
A)
Welche Vorteile bieten Coroutinen in der Android-Entwicklung und wie tragen sie dazu bei,
asynchrone Aufgaben effizienter und benutzerfreundlicher zugestalten?


Vorteile der Coroutinen sind, dass sie die Code Komplexität reduzieren ,da sie wie sequenzieller Code gelesen werden können.
Dadurch ist der Code besser lesbar und wartbar.
Coroutinen sind auch leichtgewichtig und blockieren somit keine Threads.
Außerdem wird es leichter mit Abbrüchen und Fehlern umzugehen, da der Lebenszyklus von Coroutinen klar definiert ist
und wenn sie nicht mehr gebraucht werden auch nicht  unkotrolliert weiterlaufen und somit Fehler veruchsachen können.
Zusätzlich können sie gut mit Android/Kotlin Bibliotheken integriert werden.

Coroutinen helfen bei asynchronen Aufgaben dadurch, dass die verwendeten Ressourcen mithilfe von Dispatchern schonend
eingesetzt werden. Dass es möglich ist, Funktionen anzuhalten und fortzusetzen (mit suspend und resume), werden die Ressourcen
gespart. Somit können UI-Blockaden vermieden werden.
---------------------------------------------------------------------------------------------------
B) Erkläre warum du dich für einen bestimmten Dispatcher in Aufgabe 2A)
entschieden hast.


Ich habe mich in dieser Aufgabe für einen Dispatchers.IO entschieden, da die Funktion
eine Eingabe/Ausgabe-intensive Aufgabe übernimmt.
In dieser Methode ist es eine Netzwerkanfrage bei der Daten aus einer API geholt werden.
Zustäzlich sollte nicht der Main Thread blockiert werden, falls beispielsweise auf eine
Server-Antwort gewartet werden muss und daher wäre Dispatchers.Main dafür nicht geeignet.
Es wird auch keine rechenintensive Aufgabe durchgeführt, also wäre auch Dispatchers.Default
nicht sinnvoll gewesen.
---------------------------------------------------------------------------------------------------
C) Nenne zwei praxisrelevante Anwendungsfälle, bei denen der Einsatz von
Services sinnvoll ist. Erkläre kurz warum.


Fall 1 - Musik-Streaming Apps wie z.B. Spotify:
Bei der Nutzung von einer Musik-app soll die Musik im Hintergrund weiterlaufen, auch wenn man die UI der App
gerade nicht aktiv geöffnet hat. Es gibt also eine kontinuiertliche Aufgabe im Hintergrund und eine Unabhängigkeit von der
Benutzeroberfläche. Beides sind Aspekte, die durch den Einsatz von Services umsetzbar sind. Mit einem Foreground-Service
z.B. wird dem Nutzer dann beispielsweise auch eine Benachrichtigung über die Aktivität der App angezeigt. Bei Spotify also
eine Leiste, die das aktuelle Lied anzeigt und verschiedene andere Möglichkeiten zu Interaktion bietet.

Fall 2 - Navigations-App wie z.B. Google Maps:
Wenn eine Navigationsapp genutzt wird um z.B. eine Autofahrt mit Navi
zu fahren, soll der Standort des Nutzer dauerhaft verfolgt werden um immer die korrekte Route bereitzustellen.
Auch wenn der Nutzer die App nicht aktiv offen hat, soll durch einen Service das Standorttracking noch aktiv bleiben.
Hier kann auch wieder ein Foreground-Service genutzt werden, der dem Nutzer eine Benachrichtigung über den aktuellen
Standpunkt (o.ä.) anzeigt. Außerdem kann die App wiederholende/ geplante Aufgaben im Hintegrund durchführen - beispielsweise
die Bewegung alle paar Sekunden neu zu erfassen.
---------------------------------------------------------------------------------------------------
D) Welche Vorteile bietet die Kombination von Services und Coroutinen? Kannst du
ein Beispiel aus dem Code der Wetter-App nennen, in dem beide miteinander
kombiniert genutzt werden?


Wenn man Services und Coroutinen kombiniert, kann sowohl die Effizienz, die Fehlerbehandlung
und die Ressourcenoptimierung verbessert werden. Durch richtig ausgewählte Dispatcher
wird saubere Hintergrundarbeit geleistet, ohne dass der Haupt-Thread unterbrochen wird. Mit dem
Einsatz von einem CoroutineScope wird die Ausführung der Coroutine strukturiert und kontrolliert
(Strukturierte Concurrency). Dadurch wird Kontrollfluss und Transparenz geboten.
Die Ressourcen werden dann dadurch optimiert, dass die Arbeit im Hintergrund nur dann ausgeführt wird,
wenn es wirklich nötig ist. Das ist möglich durch suspend und resume, durch die sich die Coroutinen pausieren und
später fortsetzen.

Im PopupService, der ja ein Service ist, wird in der Methode initializeTimerFromSettings()
eine Coroutine erzeugt mit einem Dispatchers.IO, um beim Starten vom Service die Timeroptionen richtig
zu laden und die Benachrichtigungen dann in der korrekten Zeitspanne zu senden.
Durch die erzeugte Coroutine wird diese Aufgabe asynchron druchgeführt und blockiert den Haupt-Thread nicht.

private fun initializeTimerFromSettings() {
        CoroutineScope(Dispatchers.IO).launch {
            val timerOption = fetchTimerOptionFromSettings()
            delayMillis = timerOptionToMillis(timerOption)

            if (delayMillis != -1L) {
                isNotificationEnabled = true
                handler.post(showNotificationRunnable)
            }
        }
    }



